import { CanvasElementType } from "./enums/CanvasElementType";
import { CanvasGrid } from "../types/CanvasGrid";
import { ExportCanvas } from "../types/ExportCanvas";
import CanvasElement from "./canvas_elements/CanvasElement";
export default class Colladraw {
    canvas: {
        canvas: HTMLCanvasElement;
        elements: CanvasElement[];
    }[];
    _activeCanvasIndex: number;
    context: CanvasRenderingContext2D;
    grid: CanvasGrid;
    gridPixelMerge: number;
    optimized: boolean;
    private state;
    private selectionLastActiveCanvasIndex?;
    private onClickLocker;
    private readonly canvasContainer?;
    constructor(canvas: HTMLCanvasElement, optimize?: boolean, gridPixelMerge?: number);
    get activeCanvasIndex(): number;
    set activeCanvasIndex(index: number);
    get activeCanvas(): {
        canvas: HTMLCanvasElement;
        elements: CanvasElement[];
    };
    private initGrid;
    generateGrid(): void;
    private updateActiveCanvas;
    draw(): void;
    addElement(element: CanvasElement, toAddToHistory?: boolean): void;
    removeElement(elementToDelete: CanvasElement): void;
    get elements(): CanvasElement[];
    addLayer(): void;
    addToHistory(): void;
    undo(): void;
    redo(): void;
    onMouseDown(event: MouseEvent): void;
    onMouseMove(event: MouseEvent): void;
    onMouseUp(_event: MouseEvent): void;
    onClick(event: MouseEvent): void;
    changeFillColor(color: string): void;
    changeStrokeColor(color: string): void;
    changeStrokeWidth(width: number): void;
    changeToolType(type: CanvasElementType): void;
    toJSON(): ExportCanvas;
    load(json: ExportCanvas): void;
    clear(): void;
    toDataURL(): string;
    savePNG(name?: string): void;
    savePDF(name?: string): void;
}
